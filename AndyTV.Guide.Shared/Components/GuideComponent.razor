@using System.Net.Http.Json
@using AndyTV.Data.Models
@using Syncfusion.Blazor.Schedule
@inject HttpClient Http

<SfSchedule TValue="ShowEvent"
            Width="100%"
            Height="98vh"
            @bind-SelectedDate="CurrentDate"
            @bind-CurrentView="CurrentView"
            StartHour="@StartHour"
            EndHour="@EndHour"
            TimeFormat="h:mm tt"
            AllowDragAndDrop="false"
            AllowResizing="false">

    <ScheduleGroup Resources="@GroupData" />

    <ScheduleResources>
        <ScheduleResource TItem="CategoryData" TValue="string"
                          DataSource="@Categories"
                          Field="CategoryId"
                          Title="Categories"
                          Name="Categories"
                          TextField="Text"
                          IdField="Id" />

        <ScheduleResource TItem="ChannelData" TValue="string"
                          DataSource="@Channels"
                          Field="ChannelId"
                          GroupIDField="CategoryId"
                          Title="Channels"
                          Name="Channels"
                          TextField="Text"
                          IdField="Id" />
    </ScheduleResources>

    <ScheduleViews>
        <ScheduleView Option="View.TimelineDay" MaxEventsPerRow="2" />
    </ScheduleViews>

    <ScheduleQuickInfoTemplates TemplateType="TemplateType.Event">
    @*     <FooterTemplate Context="context">
            @{
                var ev = context as ShowEvent;
            }
            @if (ev is not null && !string.IsNullOrWhiteSpace(ev.Description))
            {
                @ev.Description
            }
        </FooterTemplate> *@
    </ScheduleQuickInfoTemplates>

    <ScheduleEventSettings TValue="ShowEvent"
                           DataSource="@Events"
                           AllowAdding="false"
                           AllowEditing="false"
                           AllowDeleting="false" />
</SfSchedule>

@code {
    private View CurrentView = View.TimelineDay;
    private DateTime CurrentDate = DateTime.Today;
    private string StartHour = "00:00";
    private string EndHour = "23:59";

    public string[] GroupData { get; set; } = { "Categories", "Channels" };

    private List<CategoryData> Categories = new();
    private List<ChannelData> Channels = new();
    private List<ShowEvent> Events = new();

    protected override async Task OnInitializedAsync()
    {
        var url = "https://raw.githubusercontent.com/aherrick/AndyTV/guide/guide.json";
        var items = await Http.GetFromJsonAsync<List<Show>>(url);
        if (items is null || items.Count == 0) return;

        var cats = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
        var chns = new Dictionary<(string Cat, string Chan), string>();

        var newCategories = new List<CategoryData>();
        var newChannels = new List<ChannelData>();
        var newEvents = new List<ShowEvent>();

        foreach (var s in items)
        {
            if (!cats.TryGetValue(s.Category, out var catId))
            {
                catId = Guid.NewGuid().ToString();
                cats[s.Category] = catId;
                newCategories.Add(new CategoryData { Id = catId, Text = s.Category });
            }

            var key = (s.Category, s.ChannelName);
            if (!chns.TryGetValue(key, out var chanId))
            {
                chanId = Guid.NewGuid().ToString();
                chns[key] = chanId;
                newChannels.Add(new ChannelData { Id = chanId, Text = s.ChannelName, CategoryId = catId });
            }


            var startLocal = s.StartTime.ToLocalTime(); // UTC -> browser local (EST for you)
            var endLocal = s.EndTime.ToLocalTime();

            newEvents.Add(new ShowEvent
            {
                StreamingTVId = s.StreamingTVId,
                ChannelName = s.ChannelName,
                Category = s.Category,
                Subject = s.Subject,
                Description = s.Description,
                StartTime = startLocal,
                EndTime = endLocal,
                CategoryId = cats[s.Category],
                ChannelId = chns[key]
            });
        }

        Categories = newCategories;
        Channels = newChannels;
        Events = newEvents;

        // After swapping references (Categories/Channels/Events):
        var first = Events.OrderBy(e => e.StartTime).FirstOrDefault();
        if (first is not null)
        {
            CurrentDate = DateTime.Now;              
            StartHour = first.StartTime.ToString("HH\\:mm");  // raw HH:mm from earliest event
        }
    }

    public sealed class ShowEvent : Show
    {
        public string CategoryId { get; set; }
        public string ChannelId { get; set; }
    }

    public sealed class CategoryData
    {
        public string Id { get; set; }
        public string Text { get; set; }
        public bool IsExpanded { get; set; } = true;
    }

    public sealed class ChannelData
    {
        public string Id { get; set; }
        public string Text { get; set; }
        public string CategoryId { get; set; }
    }
}
