@using Syncfusion.Blazor.Schedule
@using System.Text.Json

<SfSchedule TValue="ShowData"
			Width="100%"
			Height="100vh"
			@bind-SelectedDate="CurrentDate"
			@bind-CurrentView="CurrentView"
			StartHour="@StartHour"
			EndHour="@EndHour"
			TimeFormat="h:mm tt"
			AllowDragAndDrop="false">

	<!-- Quick-info for EVENTS only -->
	<ScheduleQuickInfoTemplates TemplateType="TemplateType.Event">
	@* 	<FooterTemplate Context="context">
			@{
				var ev = context as ShowData;
			}
			@if (ev is not null)
			{
				@ev.Description
			}
		</FooterTemplate> *@
	</ScheduleQuickInfoTemplates>

	<!-- Group: Category -> Channel -->
	<ScheduleGroup Resources="@GroupData" />

	<ScheduleResources>
		<!-- IMPORTANT: Field names match properties on ShowData -->
		<ScheduleResource TItem="CategoryData" TValue="string"
						  DataSource="@Categories"
						  Field="CategoryId"
						  Title="Categories"
						  Name="Categories"
						  TextField="Text"
						  IdField="Id" />

		<ScheduleResource TItem="ChannelData" TValue="string"
						  DataSource="@Channels"
						  Field="ChannelId"
						  GroupIDField="CategoryId"
						  Title="Channels"
						  Name="Channels"
						  TextField="Text"
						  IdField="Id" />
	</ScheduleResources>

	<ScheduleViews>
		<ScheduleView Option="View.TimelineDay" MaxEventsPerRow="1" />
	</ScheduleViews>

	<!-- No custom field mapping needed because we use Subject/StartTime/EndTime -->
	<ScheduleEventSettings TValue="ShowData" DataSource="@Events"
						   AllowAdding="false" AllowEditing="false" AllowDeleting="false" />
</SfSchedule>

@code {
    private View CurrentView = View.TimelineDay;
    private DateTime CurrentDate;
    private string StartHour = "";
    private string EndHour = "";
    public string[] GroupData { get; set; } = { "Categories", "Channels" };

    private readonly List<CategoryData> Categories = new();
    private readonly List<ChannelData> Channels = new();
    private readonly List<ShowData> Events = new();

    protected override void OnInitialized()
    {
        CurrentDate = DateTime.Today;
        StartHour = "00:00";
        EndHour = "23:59";

        LoadFromJson();
    }

    private void LoadFromJson()
    {
        var json = File.ReadAllText("guide.json");
        var items = JsonSerializer.Deserialize<List<JsonShow>>(json)!;

        foreach (var grp in items.GroupBy(i => i.Category))
        {
            var cat = new CategoryData
            {
                Id = Guid.NewGuid().ToString(),
                Text = grp.Key
            };
            Categories.Add(cat);

            foreach (var chanGrp in grp.GroupBy(i => i.ChannelName))
            {
                var channel = new ChannelData
                {
                    Id = Guid.NewGuid().ToString(),
                    Text = chanGrp.Key,
                    CategoryId = cat.Id
                };
                Channels.Add(channel);

                foreach (var s in chanGrp)
                {
                    Events.Add(new ShowData
                    {
                        Subject = s.Title,
                        Description = s.Description,
                        StartTime = DateTime.Parse(s.Start),
                        EndTime = DateTime.Parse(s.End),
                        ChannelId = channel.Id,
                        CategoryId = cat.Id
                    });
                }
            }
        }
    }

    // Models
    public sealed class JsonShow
    {
        public string StreamingTVId { get; set; }
        public string ChannelName { get; set; }
        public string Category { get; set; }
        public string Title { get; set; }
        public string Start { get; set; }
        public string End { get; set; }
        public string Description { get; set; }
    }

    public sealed class CategoryData
    {
        public string Id { get; set; }
        public string Text { get; set; }
        public bool IsExpanded { get; set; } = true;
    }

    public sealed class ChannelData
    {
        public string Id { get; set; }
        public string Text { get; set; }
        public string CategoryId { get; set; }
    }

	// TODO: eliminate show data and json show the same. use a shared model between server and client
    /*
     * public sealed class ShowData
{
    [JsonPropertyName("Title")]
    public string Subject { get; set; }

    [JsonPropertyName("Start")]
    public DateTime StartTime { get; set; }

    [JsonPropertyName("End")]
    public DateTime EndTime { get; set; }

    [JsonPropertyName("Description")]
    public string Description { get; set; }

    [JsonPropertyName("ChannelName")]
    public string ChannelId { get; set; }

    [JsonPropertyName("Category")]
    public string CategoryId { get; set; }
}
     */
    public sealed class ShowData
    {
        public string Subject { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Description { get; set; }
        public string ChannelId { get; set; }
        public string CategoryId { get; set; }
    }
}
