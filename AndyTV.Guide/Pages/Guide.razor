@using AndyTV.Data.Models
@using Syncfusion.Blazor.Schedule
@inject HttpClient Http

<SfSchedule TValue="ShowEvent"
            Width="100%"
            Height="100vh"
            @bind-SelectedDate="CurrentDate"
            @bind-CurrentView="CurrentView"
            StartHour="@StartHour"
            EndHour="@EndHour"
            TimeFormat="h:mm tt"
            AllowDragAndDrop="false"
            AllowResizing="false">

    <!-- Group: Category -> Channel -->
    <ScheduleGroup Resources="@GroupData" />

    <ScheduleResources>
        <ScheduleResource TItem="CategoryData" TValue="string"
                          DataSource="@Categories"
                          Field="CategoryId"
                          Title="Categories"
                          Name="Categories"
                          TextField="Text"
                          IdField="Id" />

        <ScheduleResource TItem="ChannelData" TValue="string"
                          DataSource="@Channels"
                          Field="ChannelId"
                          GroupIDField="CategoryId"
                          Title="Channels"
                          Name="Channels"
                          TextField="Text"
                          IdField="Id" />
    </ScheduleResources>

    <ScheduleViews>
        <ScheduleView Option="View.TimelineDay" MaxEventsPerRow="1" />
    </ScheduleViews>

    <ScheduleQuickInfoTemplates TemplateType="TemplateType.Event">
        <FooterTemplate Context="context">
            @{
                var ev = context as ShowEvent;
            }
            @if (ev is not null && !string.IsNullOrWhiteSpace(ev.Description))
            {
                @ev.Description
            }
        </FooterTemplate>
    </ScheduleQuickInfoTemplates>

    <ScheduleEventSettings TValue="ShowEvent"
                           DataSource="@Events"
                           AllowAdding="false"
                           AllowEditing="false"
                           AllowDeleting="false" />
</SfSchedule>

@code {
    private View CurrentView = View.TimelineDay;
    private DateTime CurrentDate = DateTime.Today;
    private string StartHour = "00:00";
    private string EndHour = "23:59";

    public string[] GroupData { get; set; } = { "Categories", "Channels" };

    private readonly List<CategoryData> Categories = new();
    private readonly List<ChannelData> Channels = new();
    private readonly List<ShowEvent> Events = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadFromJson();
    }

    private async Task LoadFromJson()
    {
        var items = await Http.GetFromJsonAsync<List<Show>>(
            "https://raw.githubusercontent.com/aherrick/AndyTV/guide/guide.json");

        foreach (var grp in items.GroupBy(i => i.Category))
        {
            var cat = new CategoryData
            {
                Id = Guid.NewGuid().ToString(),
                Text = grp.Key
            };
            Categories.Add(cat);

            foreach (var chanGrp in grp.GroupBy(i => i.ChannelName))
            {
                var channel = new ChannelData
                {
                    Id = Guid.NewGuid().ToString(),
                    Text = chanGrp.Key,
                    CategoryId = cat.Id
                };
                Channels.Add(channel);

                foreach (var s in chanGrp)
                {
                    Events.Add(new ShowEvent
                    {
                        StreamingTVId = s.StreamingTVId,
                        ChannelName = s.ChannelName,
                        Category = s.Category,
                        Subject = s.Subject,
                        Description = s.Description,
                        StartTime = s.StartTime,
                        EndTime = s.EndTime,
                        CategoryId = cat.Id,
                        ChannelId = channel.Id
                    });
                }
            }
        }

        // Center the view on the first event's day (optional)
        var first = Events.OrderBy(e => e.StartTime).FirstOrDefault();
        if (first is not null)
        {
            CurrentDate = first.StartTime.Date;
        }
    }

    public sealed class ShowEvent : Show
    {
        public string CategoryId { get; set; }
        public string ChannelId { get; set; }
    }

    public sealed class CategoryData
    {
        public string Id { get; set; }
        public string Text { get; set; }
        public bool IsExpanded { get; set; } = true;
    }

    public sealed class ChannelData
    {
        public string Id { get; set; }
        public string Text { get; set; }
        public string CategoryId { get; set; }
    }
}
